;based on "Simple text editor with colors" by dzienny
;based on "Sumple Text Editor" by rrock.ru
;modified by Zylann for testing

	HWN J
:detect_hardware
	HWQ I
	IFE 0x7349, B
		IFE 0xf615, A
			set [display_int], I
	IFE 0x30cf, B
		IFE 0x7406, A
			set [key_int], I
	ADD I, 1
	ife i, j
		set pc, init_screen
	set pc, detect_hardware

:init_screen
	SET B, [screen_pos]
	SET A, 0
	HWI [display_int]

:splash
	set push, a
	set push, b
	set push, c
	set a, 1 ; map_font
	set b, splash_font
	hwi [display_int]
	
	set a, [screen_pos]
	set b, 0
	:splash_disp
		ife b, 128
			set pc, splash_disp_end
		set [a], b
		bor [a], 0xf000
		add b, 1
		add a, 1
		set pc, splash_disp
	:splash_disp_end
	
	set a, 0x8fff
	jsr sleep ; wait a while
	set a, 1 ; reset default font
	set b, 0
	hwi [display_int]
	set a, [screen_pos]
	set b, 0x180
	set c, 0
	jsr memset
	set c, pop
	set b, pop
	set a, pop
	set pc, main_loop

:sleep
;a=counter
	set push, a
	:sleep_loop
		sub a, 1
		ifn a, 0
			set pc, sleep_loop
	set a, pop
	set pc, pop
	
:memset
;a=addr, b=size, c=value
	set push, a
	set push, b
	:memset_loop
		set [a], c
		add a, 1
		sub b, 1
		ifn b, 0
			set pc, memset_loop
	set b, pop
	set a, pop
	set pc, pop
	
:main_loop
	jsr shift_screen
	set a, [carot_char]
	bor a, 0xe000
	set [b], a
	set c, 0
	jsr check_key
	ife c, 0
		set pc, main_loop
	ife c, 0x90
		set pc, main_loop
	ife c, 0x91
		set pc, main_loop
	jsr process_spec_keys
	ifn y, 0
		set pc, main_loop
	set a, [fore_color]
	shl a, 12
	bor c, a
	set a, [back_color]
	shl a, 8
	bor c, a
	set [b], c
	add b, 1
	SET pc, main_loop

:shift_screen
	set push, x
	set x, b
	sub x, [screen_pos]
	ifl x, 0x180
		ife [screen_pos], 0x8000
			set pc, shift_end
	ifl x, 0x160
		ifg [screen_pos], 0x8000
			sub [screen_pos], 0x40
	ifg x, 0x17f
		add [screen_pos], 0x20
	set push, a
	set push, b
	SET B, [screen_pos]
	SET A, 0
	HWI [display_int]
	set b, pop
	set a, pop
:shift_end
	set x, pop
	set pc, pop

:check_key
	set a, 1
	hwi [key_int]
	set pc, pop

:process_spec_keys
	set y, 0
	ife c, 0x10
		set pc, backspace
	ife c, 0x11
		set pc, return
	ife c, 0x08
		set y, 1
	ife c, 0x0D
		set y, 1
	set pc, pop

:backspace
	set push, a
	set y, 1
	set [b], 0
	sub b, 1
	ife [b], 0
		jsr dostuff
	ifl b, 0x8000
		set b, 0x8000
	set a, pop
	set pc, pop

:dostuff
	ife [b], 0
		sub b, 1
	ifl b, 0x8000
		set pc, pop
	set a, b
	mod a, 32
	ife a, 0
		set pc, pop
	ife [b], 0
		set pc, dostuff
	add b, 1
	set pc, pop

:return
	set [b], 0
	set y, 1
	sub b, [screen_pos]
	and b, 0xFFE0
	add b, 0x0020
	add b, [screen_pos]
	set pc, pop

;Variables
:key_int
	dat 0x0
:display_int
	dat 0x0
:fore_color
	dat 0xf ;0x0 .. 0xf
:back_color
	dat 0x1 ;0x0 .. 0xf
:carot_char
	dat 0x5f
:screen_pos
	dat 0x8000
:splash_font
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000
	dat 0x0000, 0x0000 ; ' '
	dat 0x0000, 0x0000 ; '!'
	dat 0x0000, 0x0000 ; '"'
	dat 0x0000, 0x0006 ; '#'
	dat 0x0606, 0x0606 ; '$'
	dat 0xfefe, 0x0606 ; '%'
	dat 0x86e6, 0x6630 ; '&'
	dat 0x3030, 0x3070 ; '''
	dat 0xe0c0, 0x0010 ; '('
	dat 0x30f0, 0xc000 ; ')'
	dat 0x00c0, 0xf030 ; '*'
	dat 0x1000, 0x30fe ; '+'
	dat 0xfe30, 0x3030 ; ','
	dat 0x0000, 0x0000 ; '-'
	dat 0x0000, 0x0000 ; '.'
	dat 0xfefe, 0xc6c6 ; '/'
	dat 0xc6c6, 0xc6c6 ; '0'
	dat 0x0000, 0xc0e0 ; '1'
	dat 0x7030, 0x3030 ; '2'
	dat 0x60ff, 0xff00 ; '3'
	dat 0x0000, 0xf3f3 ; '4'
	dat 0x0000, 0x30fe ; '5'
	dat 0xfe30, 0x3030 ; '6'
	dat 0x0080, 0xe060 ; '7'
	dat 0x3030, 0x3030 ; '8'
	dat 0x60e0, 0x8000 ; '9'
	dat 0x00f0, 0xf060 ; ':'
	dat 0x3030, 0x3000 ; ';'
	dat 0x0000, 0x0000 ; '<'
	dat 0x0000, 0x0000 ; '='
	dat 0x0000, 0x0000 ; '>'
	dat 0x0000, 0x0000 ; '?'
	dat 0x0000, 0x0000 ; '@'
	dat 0x0000, 0x0000 ; 'A'
	dat 0x0000, 0x0000 ; 'B'
	dat 0x0000, 0x0000 ; 'C'
	dat 0x0000, 0x0000 ; 'D'
	dat 0x3f3f, 0x0000 ; 'E'
	dat 0x071f, 0x1b33 ; 'F'
	dat 0x3333, 0x3333 ; 'G'
	dat 0x331b, 0x0020 ; 'H'
	dat 0x303c, 0x0f03 ; 'I'
	dat 0x030f, 0x3c30 ; 'J'
	dat 0x2000, 0x001f ; 'K'
	dat 0x3f30, 0x3030 ; 'L'
	dat 0x0000, 0x0000 ; 'M'
	dat 0x0000, 0x0000 ; 'N'
	dat 0x3f3f, 0x3030 ; 'O'
	dat 0x3030, 0x3030 ; 'P'
	dat 0x0000, 0x0f1f ; 'Q'
	dat 0x3830, 0x3030 ; 'R'
	dat 0x183f, 0x3f00 ; 'S'
	dat 0x0000, 0x3f3f ; 'T'
	dat 0x0000, 0x001f ; 'U'
	dat 0x3f30, 0x3030 ; 'V'
	dat 0x0007, 0x1f18 ; 'W'
	dat 0x3030, 0x3030 ; 'X'
	dat 0x181f, 0x0700 ; 'Y'
	dat 0x003f, 0x3f00 ; 'Z'
	dat 0x0000, 0x0000 ; '['
	dat 0x0000, 0x0000 ; '\'
	dat 0x0000, 0x0000 ; ']'
	dat 0x0000, 0x0000 ; '^'
	dat 0x0000, 0x0000 ; '_'
	dat 0x0000, 0x0000 ; '`'
	dat 0x0000, 0x0000 ; 'a'
	dat 0x0000, 0x0000 ; 'b'
	dat 0x0000, 0x0000 ; 'c'
	dat 0x0000, 0x0000 ; 'd'
	dat 0x0000, 0x0000 ; 'e'
	dat 0x0000, 0x0000 ; 'f'
	dat 0x0000, 0x0000 ; 'g'
	dat 0x0000, 0x0000 ; 'h'
	dat 0x0000, 0x0000 ; 'i'
	dat 0x0000, 0x0000 ; 'j'
	dat 0x0000, 0x0000 ; 'k'
	dat 0x0000, 0x0000 ; 'l'
	dat 0x0000, 0x0000 ; 'm'
	dat 0x0000, 0x0000 ; 'n'
	dat 0x0000, 0x0000 ; 'o'
	dat 0x0000, 0x0000 ; 'p'
	dat 0x0000, 0x0000 ; 'q'
	dat 0x0000, 0x0000 ; 'r'
	dat 0x0000, 0x0000 ; 's'
	dat 0x0000, 0x0000 ; 't'
	dat 0x0000, 0x0000 ; 'u'
	dat 0x0000, 0x0000 ; 'v'
	dat 0x0000, 0x0000 ; 'w'
	dat 0x0000, 0x0000 ; 'x'
	dat 0x0000, 0x0000 ; 'y'
	dat 0x0000, 0x0000 ; 'z'
	dat 0x0000, 0x0000 ; '{'
	dat 0x0000, 0x0000 ; '|'
	dat 0x0000, 0x0000 ; '}'
	dat 0x0000, 0x0000 ; '~'
	dat 0x0000, 0x0000
	
:ende


